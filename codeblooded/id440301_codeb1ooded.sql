-- phpMyAdmin SQL Dump
-- version 4.6.6
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Jan 27, 2017 at 06:06 PM
-- Server version: 10.1.20-MariaDB
-- PHP Version: 7.0.8

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `id440301_codeb1ooded`
--

-- --------------------------------------------------------

--
-- Table structure for table `BLOGS`
--

CREATE TABLE `BLOGS` (
  `ID` int(11) NOT NULL,
  `TITLE` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `PHRASE` varchar(200) COLLATE utf8_unicode_ci NOT NULL,
  `HOME_CONTENT` varchar(500) COLLATE utf8_unicode_ci NOT NULL,
  `DATA_CONTENT` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `IMAGE_NAME` varchar(25) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `BLOGS`
--

INSERT INTO `BLOGS` (`ID`, `TITLE`, `PHRASE`, `HOME_CONTENT`, `DATA_CONTENT`, `IMAGE_NAME`) VALUES
(1, 'Installing Xampp', 'Not to be confused with XMPP, a messaging protocol or WAMP, a Windows web server equivalent.', 'XAMPP is a free and open source cross-platform web server solution stack package developed by Apache Friends, consisting mainly of the Apache HTTP Server, MySQL database, and interpreters for scripts written in the PHP and Perl programming languages.', '<p><h2 style=\"text-align: left;\"><b style=\"font-size: 30;\">Installation:&nbsp;&nbsp;</b> </h2>\r\n1. <a href=\"https://www.apachefriends.org/download.html\" target=\"_blank\">Open link</a> and download appropriate Xampp version for you.<br /><br />\r\n2. Open your terminal (Press Ctrl + Alt + T) and change directory to the folder when you have downloaded Xampp. Below commands are for specific version, replace with your version number (xampp-linux-x64-7.0.6-0-installer.run file name)<br /><br />\r\n3. Reset the permissions of Xampp installer and make it executable. Run the following command. If you are prompted for password enter it.<br />\r\n<b><i>sudo chmod +x xampp-linux-x64-7.0.6-0-installer.run</i></b><br /><br />\r\n4. Run the installer by running the following command.<br />\r\n<b><i>sudo ./xampp-linux-x64-7.0.6-0-installer.run</i></b><br /><br />\r\n5. A GUI window will open. Press enter till finish (or customize it in your own way)<br /><br />\r\n<h3 style=\"text-align: left;\">\r\n<b style=\"font-size: 20;\">Security Command:</b></h3>\r\nRun the following command to set the password and other security confidentials if you want:<br />\r\n<i><b>sudo /opt/lampp/lampp security</b></i><br /><br />\r\n<h3 style=\"text-align: left;\">\r\n<b style=\"font-size: 24;\">Working with Xampp: </b>&nbsp;</h3>\r\nYou put all your projects in /opt/lampp/htdocs in your linux to access them via server <br />\r\n1. Install gksu by running following command on your linux ystem:<br />\r\n<b><i>sudo apt-get install gksu</i></b><br /><br />\r\n2.Open htdocs folder with sudo permission(that\'s best way to edit files in xampp):<br />\r\n<b><i>gksudo nautilus /opt/lampp/htdocs</i></b><br /><br />\r\n3. Starting xampp server:<br />\r\n<b><i>sudo /opt/lampp/lampp start #start xampp</i></b><br /><br />\r\n4. Now you can go to your browser and enter 127.0.0.1/&lt;project-name&gt;/&nbsp; to access your project.<br /><br />\r\n5. To stop the server run the following command:<br />\r\n<i><b>sudo /opt/lampp/lampp stop #stop xampp</b></i><br /><br />\r\n<h4 style=\"text-align: left;\">\r\n<b>Troubleshooting:&nbsp;</b></h4>\r\nIf your command above to start xampp shows<i><b> </b></i>message something like this:<br />\r\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Starting XAMPP for Linux 7.0.6-0...<br />XAMPP: Starting Apache...fail.<br />XAMPP:&nbsp; Another web server is already running.<br />XAMPP: Starting MySQL...ok.<br />XAMPP: Starting ProFTPD...ok.</span><br />\r\nthen, first stop your server, run the following command and try again.<br />\r\n<i><b>sudo /etc/init.d/apache2 stop #if apache is not working</b></i><br /><br />\r\nI hope this helps with getting away with setting up your Xampp projects on Linux :)ï»¿<i><b> </b></i><br />\r\nHave a happy working with your Linux :)</div></p>', 'xampp.jpg'),
(2, 'Java and Android Studio', 'I wonder, he wondered, if any human has ever felt this way before about an android.', 'Android Studio is the official integrated development environment (IDE) for Android platform development.', '<p><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">\r\n<h2 style=\"text-align: left;\">\r\nInstall Java: </h2>\r\nJava comes in two variants for Linux OpenJDK and Oracle Java. OpenJDK is default one and works fine for many applications but not all applications. Hence, oracle Java is recomended for use. Here\'s how to install Oracle-Java(version-8) on linux through terminal:<br /><br />\r\n1. Add ppa for Java<br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-add-repository ppa:webupd8team/java</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\">2. Update Linux</span> </span><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get update</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\">3. Install Oracle java </span></span><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get install oracle-java8-installer</span><br /><br />\r\n4. Set Oracle Java as default<br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">export JAVA_HOME=/usr/lib/jvm/java-8-oracle</span><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get install oracle-java8-set-default</span><br /><br />\r\n5.&nbsp; Configure other related settings<br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo update-alternatives --config java</span><br /><br />\r\n<h2 style=\"text-align: left;\">\r\nInstall Android Studio:</h2>\r\n1. Add ppa for Android Studio<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"> </span><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-add-repository ppa:maarten-fonville/android-studio</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\">2. Update Linux</span> </span><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get update</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\">3. Install Android studio</span></span><span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get install android-studio</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial, Helvetica, sans-serif;\">4. Install sdk and setup pathin settings to start creating android projects.</span> </span></div></div></p>', 'android_studio.jpg'),
(3, 'Ruby on Rails', 'Half, Not Half-Assed', 'Learning to build a modern web application is daunting. Ruby on Rails makes it much easier and more fun. It includes everything you need to build fantastic applications, and you can learn it with the support of our large, friendly community.', '<p>This method worked for me(Ubuntu Gnome 14.04)<br /><br />\r\n1. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo apt-get update</span><br />\r\nIf there are errors you would most probably not be able to run 5th command, you can follow note below here or after the command as you want.<br /><br />\r\n2.<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"> gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3;</span><br />\r\nEven if this command doesn\'t work don\'t worry because it didn\'t works for me too but I got ruby on rails installed then too. :P<br /><br />\r\nIf above command doesn\'t work then try this command:<br />\r\n&nbsp;&nbsp;&nbsp; <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -</span><br /><br />\r\n3.&nbsp;<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"> /bin/bash --login</span><br /><br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\"><span style=\"font-family: Arial,Helvetica,sans-serif;\">4.</span> curl -L get.rvm.io | bash -s stable;</span><br /><br />\r\n5. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">source ~/.rvm/scripts/rvm;</span><br /><br />\r\n6. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm requirements;</span><br />\r\nIf here problem comes then refer to note below and run the command from starting after following the note.<br /><br />\r\n7. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm install 2.1.2;</span><br /><br />\r\n8. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">ruby -v</span><br />\r\nSo to get little excited you can run this command that you have at least ruby installed on your system<br /><br />\r\n9. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm use 2.1.2 --default;</span><br /><br />\r\n10. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm rubygems current;</span><br /><br />\r\n11. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">gem install rails;</span><br /><br />\r\n12. <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rails -v</span><br />\r\nWay to go, if you got a version number but if you are stuck somewhere please refer google (esp. stack overflow, it helped me a lot)<br />\r\nNo warranty to work!<br />\r\nBut, it worked for me and if it works for u ;) gr8 then<br /><br />\r\nNote: So u get errors, this method worked for me, try at your own risk(But there\'s not too much risk):<br />\r\n1. Check what error have you got, try resolving them by fixing them or ignoring them(Ignoring them: explained)<br /><br />\r\n2. In terminal type: <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">sudo /etc/apt</span><br /><br />\r\n3. Comment out (use # before every line) all kind of statements which leads to an error (404 not found) in file sources.list .<br /><br />\r\n4. You may also find a directory sources.list.d in which there are other files too, try finding there too.<br /><br />\r\n5. Run your commands again.<br /><br />\r\n6. Make sure after getting everything done you uncomment the lines you have commented.<br /><br />\r\n7. For finding error creating lines try matching the URLs of error creating URLs and URLs mentioned in .list and .save files.<br /><br /><br />\r\n<b>Some other useful commands:</b><br />\r\n1. To make rvm stable:<br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm get stable --auto-dotfiles</span><br /><br />\r\n2. Make rvm 2.1.2 default (in case, you have more than one versions installed): <span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">rvm use 2.1.2 --default; </span><br /><br />\r\n3. Install gem-bundle:&nbsp; <br />\r\n<span style=\"font-family: &quot;Courier New&quot;,Courier,monospace;\">gem install bundler</span><br /><br /><br />\r\n<b>Some useful links:</b><br />\r\nhttps://rvm.io/integration/gnome-terminal<br />\r\nhttps://gorails.com/setup/ubuntu/14.10</p>', 'ruby_on_rails.jpg'),
(4, 'Git and Github', 'If you have anything staged, commit now or stash forever', 'Git is an open source, distributed version control system designed for speed and efficiency', '<a href=\"../extras/session/git_github.pdf\">Find the session pdf here</a>\r\n<p>Installation: apt-get install git-core<br /><br />\r\nConfigure Git:<br />\r\ngit config --global user.name \"Megha Aggarwal\"<br />\r\ngit config --global user.email \"meghaaggarwal493@gmail.com\"<br />\r\ngit config --list #show settings<br /><br />\r\ngithub.com/github/gitignore<br /><br />\r\nInitialize git repository:<br />\r\ngit init<br />\r\ngit status (check if git repo. is initialized)<br />\r\ngit remote add origin &lt;remote repo url&gt;<br /><br />\r\ngit clone &lt;remote url&gt; #to clone git project<br /><br />\r\nTo push changes:<br />\r\ngit stash<br />\r\ngit pull origin master<br />\r\ngit stash pop<br />\r\ngit add .<br />\r\ngit commit -m \"your commit message\"<br />\r\ngit push<br />\r\n(In case of first push use instead: git push -u origin master)<br /><br />\r\nTo revert commits on git repository<br />\r\ngit reset head~2<br />\r\ngit status<br />\r\ngit add /src<br />\r\ngit commit<br />\r\ngit push --force origin master<br />\r\n(Force ur local changes on remote git repo)<br /><br />\r\ngit reset &lt;file&gt; #to undo git add before<br />\r\ngit reset #to unstage all due changes<br />\r\ngit reset HEAD \"file\"<br /><br />\r\nUndoing a commit:<br />\r\ngit commit --amend # If you want to change your previous commit<br /><br />\r\nRemoving or renaming file:<br />\r\ngit rm \"file\"&nbsp; # If you remove a file it shows as \"Changed but not updated\"<br />\r\ngit rm --cached \"file\"<br />\r\nIf you have committed a file to be removed you must add the -f option<br />\r\ngit mv \"oldfilename\" \"newfilename\" # Renames a file<br /><br />\r\nOther useful commands:<br />\r\ngit status<br />\r\ngit remote -v<br />\r\ngit diff # Shows what you changed, but haven\'t staged<br />\r\ngit diff --cached # Shows what has been staged, but not committed<br />\r\ngit commit -a -m \'Changed comment\' # Skips staging and commit message<br /><br />\r\nViewing log:<br />\r\ngit log<br />\r\ngit log --pretty=oneline&nbsp; #(Viewing all log in one line)<br />\r\ngit log --pretty=format:\"%h : %an : %ar : %s\" #(formatting log, %h - Abbreviated Hash , %an - Authors Name , %ar - Date Changed , %s - First Line of Comment<br />\r\ngit log -p -2 # Shows the last 2 commit changes<br />\r\ngit log --stat # Prints abbreviated stats<br />\r\ngit log --since=1.weeks # Show only changes in the last week<br />\r\ngit log --since=\"specific date\" # Show changes since this date<br />\r\ngit log --author=\"author name\" # Changes made by author<br />\r\ngit log --before=\"date\" # Changes made before this date<br /><br />\r\ngit remote rename origin &lt;new-name&gt; # Renames remote to &lt;new-name&gt;<br /><br />\r\ngit fetch origin # Gets data from the remote, but it doesn\'t merge changes with your work<br />\r\ngit pull https://github.com/derekbanas/SimpleFragment.git<br /><br />\r\nTagging: Tags are used to tag files at important points in history<br />\r\ngit tag -a v0.1 -m \'version 0.1\' # Creates an annotated tag<br />\r\ngit tag # Shows all the tags<br />\r\ngit show v0.1 # Shows details about the commit that was tagged<br />\r\ngit tag v0.4-lw # Creates a lightweight tag on a commit that stores the hash for the commit<br />\r\ngit tag -a v0.01 &lt;last-6-digits-of-hash-of-commit&gt; # You can tag commits after the event also. When you enter this command an editor opens for you to leave a comment. The final part is the hash for the commit you want to tag.<br />\r\ngit push &lt;branch-name&gt; v0.1 # You can also push tags, The tag shows up under releases on GitHub<br />\r\ngit push &lt;branch-name&gt; --tags # You can also push all tags at once<br /><br />\r\nYou can set aliases to save time<br />\r\ngit config --global alias.co commit # Now you can type git co to commit<br /><br />\r\nBranches:<br />\r\ngit branch &lt;branch-name&gt; #create a branch<br />\r\ngit checkout &lt;branch-name&gt; #shift to that branch<br />\r\ngit checkout -b &lt;branch-name&gt; #create a branch and shift to it<br />\r\ngit push origin &lt;branch-name&gt; #to push branch changes on git<br />\r\ngit fetch origin #receive a reference to branch on the server but not getting all the files<br />\r\ngit checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt; #to get the whole entire branch<br />\r\ngit branch #see all your branches<br />\r\ngit branch --merged #see all merged branches<br />\r\ngit branch --no-merged #see unmerged branches<br />\r\ngit branch -v #see all branches and last commit<br />\r\ngit merge &lt;branch-name&gt; #to merge the branch to master branch<br />\r\ngit branch -d &lt;branch-name&gt; #to delete a merged branch<br />\r\ngit branch -D &lt;branch-name&gt; #to delete a unmerged branch<br />\r\ngit push origin :&lt;branch-name&gt; #to delete the branch from github<br />\r\ngit branch -m &lt;new-branch-name&gt; #to change name of the branch<br />\r\ngit mergetool #default merge tool of git to resolve merge conflicts<br />\r\ngit rebase &lt;branch-name-to-rebase-with&gt; #rebase current branch with given branch<br /><br />\r\nReverting and resetting:<br />\r\ngit revert HEAD #reverting a single commit<br />\r\ngit reset &lt;some-file-name&gt; #to get rid of a file(see actual)<br />\r\ngit reset #will reset the staging area to match the most recent version of commit, however leave the working directory completely unchanged<br />\r\ngit reset aCommit #will reset staging area but isn\'t going to do anything on working directory (give hash of commit in place of aCommit)<br />\r\ngit reset --hard #will reset the staging area as well as working directory to match the recent commit<br />\r\ngit reset --hard &lt;commit-hash&gt; #move to the listed commit as well as staging and working directory<br />\r\ngit clean #undoable changes, will remove unstaged files<br />\r\ngit clean -n #show files that will be removed if u ran above command<br /><br />\r\nSSH keys:<br />\r\nssh-keygen -t rsa -C \"email:meghaaggarwal493@gmail.com\" # generate SSH key<br />\r\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # Creates a new ssh key, using the provided email as a label (as provided by git)<br />\r\neval \"$(ssh-agent -s) #ensure ssh agent is enabled<br />\r\nssh-add ~/.ssh/&lt;key-name&gt; #adding ssh key to ssh agent<br />\r\n#Now create a file config in ~/.ssh/ folder and add your ssh key host like<br />\r\nhost github.com<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HostName github.com<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User git<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IdentityFile ~/.ssh/rsa_key<br />\r\n#till here<br />\r\ngit remote add myorigin git@github.com:megha-code/Trying-git.git #in your git repo create an alias \"myorigin\" to your ssh key<br />\r\ngit push myorigin(alias-name) master(branch) #to push changes with your alias. Say yes for first time and it on\'t ask again<br />\r\nRealted link:<br />\r\nhttps://help.github.com/articles/what-are-github-s-ssh-key-fingerprints<br /><br />\r\nForking and pull request:<br />\r\ngit clone https://github.com/&lt;my-user-name&gt;/&lt;repo-name&gt;.git #cloning repo after forking it on github<br />\r\ngit remote add upstream https://github.com/&lt;my-user-name&gt;/&lt;repo-name&gt;.git #assign the original remote and not the fork to the keyword upstream<br />\r\ngit fetch upstream #pull in changes made in original repository without affecting any local file<br />\r\ngit push origin master #push changes to fork repository<br />\r\ngit merge upstream/master #merge files on github with all of the local files<br /><br />\r\nUseful link:\r\n<ul><li>http://www.gitguys.com/</li>\r\n<li>https://codingsec.net/2017/01/get-started-git-source-control-app/</li></ul></p>', 'gitngithub.png');

-- --------------------------------------------------------

--
-- Table structure for table `FEEDBACK_SESSION`
--

CREATE TABLE `FEEDBACK_SESSION` (
  `NAME` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `EMAIL` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `PHONE` int(10) NOT NULL,
  `WEBSITE` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `MESSAGE` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `ID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `MESSAGES`
--

CREATE TABLE `MESSAGES` (
  `ID` int(11) NOT NULL,
  `NAME` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `EMAIL` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `MESSAGE` varchar(250) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `BLOGS`
--
ALTER TABLE `BLOGS`
  ADD PRIMARY KEY (`ID`);

--
-- Indexes for table `FEEDBACK_SESSION`
--
ALTER TABLE `FEEDBACK_SESSION`
  ADD PRIMARY KEY (`ID`);

--
-- Indexes for table `MESSAGES`
--
ALTER TABLE `MESSAGES`
  ADD PRIMARY KEY (`ID`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
